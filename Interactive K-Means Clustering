<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>Interactive K-Means Clustering Demo - AI & Machine Learning</title>
<style>
  @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');
  body {
    margin: 0;
    background: #121212;
    color: #e0e0e0;
    font-family: 'Roboto', sans-serif;
    display: flex;
    flex-direction: column;
    height: 100vh;
    overflow: hidden;
  }
  header {
    background: linear-gradient(90deg, #6a11cb 0%, #2575fc 100%);
    padding: 1.5rem 2rem;
    text-align: center;
    box-shadow: 0 3px 10px rgba(0,0,0,0.2);
  }
  header h1 {
    margin: 0;
    font-weight: 700;
    font-size: 2rem;
    text-transform: uppercase;
    letter-spacing: 2px;
  }
  header p {
    margin-top: 0.5rem;
    font-weight: 400;
    font-size: 1rem;
    color: #cfd8dc;
  }
  main {
    flex: 1;
    display: flex;
    flex-direction: row;
    padding: 1.5rem 2rem;
    gap: 2rem;
    background: #1e1e1e;
  }
  section#demo {
    flex: 2;
    position: relative;
    background: #212121;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0,123,255,0.5);
    display: flex;
    justify-content: center;
    align-items: center;
    overflow: hidden;
  }
  canvas {
    background: #000;
    border-radius: 12px;
    cursor: crosshair;
  }
  section#controls {
    flex: 1;
    background: #272727;
    padding: 1rem 1.5rem;
    border-radius: 12px;
    box-shadow: 0 4px 15px rgba(38,198,218,0.6);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }
  h2 {
    margin: 0 0 0.75rem 0;
    font-weight: 700;
    color: #4dd0e1;
  }
  label {
    font-weight: 500;
    margin-bottom: 0.25rem;
    display: block;
    color: #b0bec5;
  }
  input[type="range"] {
    width: 100%;
    -webkit-appearance: none;
    background: #455a64;
    height: 8px;
    border-radius: 9999px;
    outline: none;
    cursor: pointer;
  }
  input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 22px;
    height: 22px;
    background: #00acc1;
    border-radius: 50%;
    cursor: pointer;
    border: 2px solid #00bcd4;
    transition: background 0.3s ease;
  }
  input[type="range"]:hover::-webkit-slider-thumb {
    background: #26c6da;
  }
  button {
    background: #00acc1;
    border: none;
    color: #fff;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    font-weight: 700;
    cursor: pointer;
    transition: background 0.3s ease;
    box-shadow: 0 0 10px #00bcd4aa;
  }
  button:hover {
    background: #26c6da;
  }
  footer {
    background: #111;
    text-align: center;
    padding: 0.75rem 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  .instructions {
    font-size: 0.9rem;
    color: #90a4ae;
    line-height: 1.3;
  }
</style>
</head>
<body>
<header>
  <h1>Interactive K-Means Clustering</h1>
  <p>A modern AI/ML demo showcasing clustering algorithm visualization</p>
</header>
<main>
  <section id="demo">
    <canvas id="canvas" width="600" height="400" title="Click to add points"></canvas>
  </section>
  <section id="controls">
    <h2>Controls</h2>
    <div>
      <label for="clustersRange">Number of Clusters: <span id="clustersCount">3</span></label>
      <input type="range" id="clustersRange" min="1" max="7" value="3" />
    </div>
    <div>
      <label for="iterationsRange">Max Iterations: <span id="iterationsCount">10</span></label>
      <input type="range" id="iterationsRange" min="1" max="30" value="10" />
    </div>
    <div class="instructions">
      <strong>Instructions:</strong> Click anywhere on the canvas to add data points. Adjust clusters and iterations. Click "Run Clustering" to see how K-Means groups the points dynamically.
    </div>
    <button id="runBtn">Run Clustering</button>
    <button id="resetBtn" style="background:#e53935; box-shadow: 0 0 15px #ef5350cc;">Reset Points</button>
  </section>
</main>
<footer>
  Â© 2024 AI & Machine Learning Demo - Built for GitHub showcase
</footer>

<script>
  (() => {
    const canvas = document.getElementById('canvas');
    const ctx = canvas.getContext('2d');

    const clustersRange = document.getElementById('clustersRange');
    const clustersCountLabel = document.getElementById('clustersCount');
    const iterationsRange = document.getElementById('iterationsRange');
    const iterationsCountLabel = document.getElementById('iterationsCount');
    const runBtn = document.getElementById('runBtn');
    const resetBtn = document.getElementById('resetBtn');

    // Variables
    let points = [];
    let centroids = [];
    let assignments = [];
    let maxIterations = parseInt(iterationsRange.value);
    let k = parseInt(clustersRange.value);
    let running = false;

    // Colors for clusters, max 7 clusters
    const colors = ['#00bcd4','#ff5722','#4caf50','#ffc107','#9c27b0','#f44336','#3f51b5'];

    // Update labels on slider input
    clustersRange.addEventListener('input', () => {
      k = parseInt(clustersRange.value);
      clustersCountLabel.textContent = k;
    });
    iterationsRange.addEventListener('input', () => {
      maxIterations = parseInt(iterationsRange.value);
      iterationsCountLabel.textContent = maxIterations;
    });

    // Add point on canvas click
    canvas.addEventListener('click', (e) => {
      if(running) return;
      const rect = canvas.getBoundingClientRect();
      const x = e.clientX - rect.left;
      const y = e.clientY - rect.top;
      points.push({x, y});
      draw();
    });

    // Reset points
    resetBtn.addEventListener('click', () => {
      points = [];
      centroids = [];
      assignments = [];
      running = false;
      draw();
    });

    // Euclidean distance
    function dist(a, b) {
      return Math.hypot(a.x - b.x, a.y - b.y);
    }

    // Initialize centroids randomly from points
    function initCentroids() {
      centroids = [];
      if (points.length === 0) return;
      let takenIndices = new Set();
      while (centroids.length < k) {
        let idx = Math.floor(Math.random() * points.length);
        if (!takenIndices.has(idx)) {
          centroids.push({...points[idx]});
          takenIndices.add(idx);
        }
      }
    }

    // Assign points to closest centroid
    function assignPoints() {
      assignments = points.map(p => {
        let minDist = Infinity;
        let clusterIndex = -1;
        centroids.forEach((c,i) => {
          let d = dist(p, c);
          if (d < minDist) {
            minDist = d;
            clusterIndex = i;
          }
        });
        return clusterIndex;
      });
    }

    // Update centroid positions to mean of assigned points
    function updateCentroids() {
      let moved = false;
      for(let i = 0; i < k; i++) {
        let assignedPoints = points.filter((_, idx) => assignments[idx] === i);
        if (assignedPoints.length === 0) continue;
        let meanX = assignedPoints.reduce((sum,p) => sum + p.x, 0) / assignedPoints.length;
        let meanY = assignedPoints.reduce((sum,p) => sum + p.y, 0) / assignedPoints.length;
        if (meanX !== centroids[i].x || meanY !== centroids[i].y) {
          centroids[i].x = meanX;
          centroids[i].y = meanY;
          moved = true;
        }
      }
      return moved;
    }

    // Draw points, centroids and clusters
    function draw() {
      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Draw clusters (filled points)
      points.forEach((p, i) => {
        const cluster = assignments[i];
        ctx.beginPath();
        ctx.fillStyle = cluster !== undefined && cluster >= 0 ? colors[cluster] : '#eee';
        ctx.globalAlpha = 0.7;
        ctx.arc(p.x, p.y, 7, 0, 2 * Math.PI);
        ctx.fill();
        ctx.globalAlpha = 1;
      });

      // Draw centroids
      centroids.forEach((c, i) => {
        ctx.beginPath();
        ctx.fillStyle = colors[i];
        ctx.strokeStyle = '#fff';
        ctx.lineWidth = 2;
        ctx.arc(c.x, c.y, 15, 0, 2 * Math.PI);
        ctx.fill();
        ctx.stroke();
      });
    }

    // Run the k-means clustering, visualizing each iteration,
    // will run asynchronously with small delay for effect
    async function runKMeans() {
      if(points.length === 0) {
        alert('Please add some points before running clustering.');
        return;
      }
      if(k < 1) {
        alert('Clusters count must be at least 1.');
        return;
      }

      running = true;
      initCentroids();
      let iterations = 0;
      let moved = true;

      while(moved && iterations < maxIterations) {
        assignPoints();
        draw();
        await new Promise(r => setTimeout(r, 500));
        moved = updateCentroids();
        draw();
        await new Promise(r => setTimeout(r, 500));
        iterations++;
      }
      running = false;
    }

    runBtn.addEventListener('click', () => {
      if (running) return;
      runKMeans();
    });

    // Initial draw
    draw();
  })();
</script>
</body>
</html>

